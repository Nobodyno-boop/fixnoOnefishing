plugins {
    id 'java'
}

group = 'fr.nobody.fix'
version = '1.3'

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven { url 'https://jitpack.io' }

}

// put the jar in plugins folder for test fast or default folder is build.
libsDirName = System.getenv().getOrDefault("dir", "./build")


dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'
    compileOnly 'org.spigotmc:spigot-api:1.19-R0.1-SNAPSHOT' // The Spigot API with no shadowing. Requires the OSS repo.
//    compileOnly 'org.spigotmc:spigot:1.19-R0.1-SNAPSHOT' // The full Spigot server with no shadowing. Requires mavenLocal.

    compileOnly "com.github.MilkBowl:VaultAPI:1.7"
    implementation('org.jooq:joor:0.9.14')
    // to evaluate settings.priceformula in config NoOneFishing
    implementation('net.objecthunter:exp4j:0.4.8')
}


def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}


jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    exclude("module-info.class")
    exclude("mojang-translations/**") // exclude mojangs ...
    // Will include every single one of your dependencies, project or not
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }


}
